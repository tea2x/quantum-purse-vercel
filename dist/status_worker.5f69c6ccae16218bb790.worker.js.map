{"version":3,"file":"status_worker.5f69c6ccae16218bb790.worker.js","mappings":"MAmBAA,eAAeC,IACbC,aAAYF,UACVG,iBAjBK,IAAIC,SAASC,IAElB,MAAMC,EAAYC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GACvDC,KAAKC,YAAY,CAAEC,QAAS,gBAAiBP,cAE7CK,KAAKG,iBAAiB,WAAW,SAASC,EAAQC,GAC5CA,EAAMC,KAAKX,YAAcA,IAC3BD,EAAQW,EAAMC,KAAKA,MACnBN,KAAKO,oBAAoB,UAAWH,GAExC,GAAE,IAQFI,QAAQC,IACN,wDACAjB,YAGFQ,KAAKC,YAAY,CAAES,KAAM,mBAAoBJ,KAAMd,YAAa,GAC/D,IACL,CAGAQ,KAAKW,UAAYtB,eAAgBgB,GAC/B,MAAM,QAAEH,EAAO,UAAEP,GAAcU,EAAMC,KACrB,UAAZJ,IACFZ,IACAU,KAAKC,YAAY,CAAES,KAAM,UAAWf,cAExC,C","sources":["webpack://quantum-purse/./light-client/status_worker.js"],"sourcesContent":["// This worker constantly every 5 seconds updates sync status to the UI via an interface provided by QuantumPurse class\n\n/* Function to request sync status from the main thread */\nfunction requestSyncStatus() {\n  return new Promise((resolve) => {\n    // create & request\n    const requestId = Math.random().toString(36).substring(7);\n    self.postMessage({ command: \"getSyncStatus\", requestId });\n    // fulfill & remove\n    self.addEventListener(\"message\", function handler(event) {\n      if (event.data.requestId === requestId) {\n        resolve(event.data.data);\n        self.removeEventListener(\"message\", handler);\n      }\n    });\n  });\n}\n\n/* Start periodic sync status updates every 5 seconds */\nasync function startSyncStatusUpdates() {\n  setInterval(async () => {\n    syncStatus = await requestSyncStatus();\n    console.log(\n      \"\\x1b[37;44m INFO \\x1b[0m \\x1b[1mlight-client-sync-status\\x1b[0m: \",\n      syncStatus\n    );\n    // Send the sync status to the main thread\n    self.postMessage({ type: \"syncStatusUpdate\", data: syncStatus });\n  }, 5000);\n}\n\n/* This worker's persistent command receiver */\nself.onmessage = async function (event) {\n  const { command, requestId } = event.data;\n  if (command === \"start\") {\n    startSyncStatusUpdates();\n    self.postMessage({ type: \"started\", requestId });\n  }\n};"],"names":["async","startSyncStatusUpdates","setInterval","syncStatus","Promise","resolve","requestId","Math","random","toString","substring","self","postMessage","command","addEventListener","handler","event","data","removeEventListener","console","log","type","onmessage"],"sourceRoot":""}